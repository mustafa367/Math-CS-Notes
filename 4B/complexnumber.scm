(define (disp x) (display x) (display "\n"))

(define (+c x y)
  (makerectangular (+ (re x) (re y))
		   (+ (im x) (im y))))
(define (*c x y)
  (makepolar (+ (mag x) (mag y))
		   (+ (ang x) (ang y))))

(define (attachtype t x) (cons t x))
(define (type x) (car x))
(define (contents x) (cdr x))
(define (operate op obj)
  (let ((proc (get (type obj) op)))
    (if (not (null? proc))
      (proc (contents obj))
      (error "undefined op"))))

(define (rectangular? x) (eq? (type x) 'rectanngular))
(define (makerectangular x y) (attachtype 'rectangular (cons x y)))
(define (realpartrectangular z) (car z))
(define (imagpartrectangular z) (cdr z))
(define (magrectangular z) (sqrt (+ (* (car z) (car z)) (* (cdr z) (cdr z)))))
(define (angrectangular z) (atan (cdr z) (car z)))

(define (polar? x) (eq? (type x) 'polar))
(define (makepolar x y) (attachtype 'polar (cons x y)))
(define (magpolar z) (car z))
(define (angpolar z) (cdr z))
(define (realpartpolar z) (* (magpolar z) (cos (angpolar z))))
(define (imagpartpolar z) (* (magpolar z) (sin (angpolar z))))

(define (get type op)
        (cond ((and (eq? 'polar type) (eq? op 'realpart)) 'realpartpolar)
	      ((and (eq? 'polar type) (eq? op 'imagpart)) 'imagpartpolar)
	      ((and (eq? 'polar type) (eq? op 'mag)) 'magpolar)
	      ((and (eq? 'polar type) (eq? op 'ang)) 'angpolar)
	      ((and (eq? 'real type) (eq? op 'realpart)) 'realpartrectangular)
	      ((and (eq? 'real type) (eq? op 'imagpart)) 'imagpartrectangular)
	      ((and (eq? 'real type) (eq? op 'mag)) 'magrectangular)
	      ((and (eq? 'real type) (eq? op 'ang)) 'angrectangular)
	      (else #nil)))
(define (realpart x) (operate 'realpart x))
(define (imagpart x) (operate 'imagpart x))
(define (mag x) (operate 'mag x))
(define (ang x) (operate 'ang x))



(define A (makerectangular 1 2))
(define B (contents A))
(define C (makepolar (magrectangular B) (angrectangular B)))
(define D C)
(disp D)
(disp (realpart D))
;(disp (imagpart D))
;(disp (mag D))
;(disp (ang D))

